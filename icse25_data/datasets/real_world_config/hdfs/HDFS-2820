<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>dfs.namenode.redundancy.considerLoad.factor</name>
  <value>2.0</value>
    <description>The factor by which a node's load can exceed the average
      before being rejected for writes, only if considerLoad is true.
    </description>
</property>

<property>
  <name>dfs.permissions.superusergroup</name>
  <value>supergroup</value>
  <description>The name of the group of super-users.
    The value should be a single group name.
  </description>
</property>

<property>
  <name>dfs.client.read.shortcircuit</name>
  <value>false</value>
  <description>
    This configuration parameter turns on short-circuit local reads.
  </description>
</property>

<property>
  <name>dfs.namenode.reject-unresolved-dn-topology-mapping</name>
  <value>true</value>
  <description>
    If the value is set to true, then namenode will reject datanode
    registration if the topology mapping for a datanode is not resolved and
    NULL is returned (script defined by net.topology.script.file.name fails
    to execute). Otherwise, datanode will be registered and the default rack
    will be assigned as the topology path. Topology paths are important for
    data resiliency, since they define fault domains. Thus it may be unwanted
    behavior to allow datanode registration with the default rack if the
    resolving topology failed.
  </description>
</property>

<property>
  <name>dfs.namenode.reencrypt.batch.size</name>
  <value>2000</value>
  <description>How many EDEKs should the re-encrypt thread process in one batch.
  </description>
</property>

<property>
  <name>dfs.namenode.shared.edits.dir</name>
  <value>/tmp/share</value>
  <description>A directory on shared storage between the multiple namenodes
  in an HA cluster. This directory will be written by the active and read
  by the standby in order to keep the namespaces synchronized. This directory
  does not need to be listed in dfs.namenode.edits.dir above. It should be
  left empty in a non-HA cluster.
  </description>
</property>

<property>
  <name>dfs.client.max.block.acquire.failures</name>
  <value>6</value>
  <description>
    Maximum failures allowed when trying to get block information from a specific datanode.
  </description>
</property>

<property>
  <name>dfs.namenode.provided.enabled</name>
  <value>false</value>
    <description>
      Enables the Namenode to handle provided storages.
    </description>
</property>

</configuration>
