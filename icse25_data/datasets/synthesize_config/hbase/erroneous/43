<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.ipc.server.callqueue.scan.ratio</name>
  <value>-1</value>
    <description>Given the number of read call queues, calculated from the total number
      of call queues multiplied by the callqueue.read.ratio, the scan.ratio property
      will split the read call queues into small-read and long-read queues.
      A value lower than 0.5 means that there will be less long-read queues than short-read queues.
      A value of 0.5 means that there will be the same number of short-read and long-read queues.
      A value greater than 0.5 means that there will be more long-read queues than short-read queues
      A value of 0 or 1 indicate to use the same set of queues for gets and scans.

      Example: Given the total number of read call queues being 8
      a scan.ratio of 0 or 1 means that: 8 queues will contain both long and short read requests.
      a scan.ratio of 0.3 means that: 2 queues will contain only long-read requests
      and 6 queues will contain only short-read requests.
      a scan.ratio of 0.5 means that: 4 queues will contain only long-read requests
      and 4 queues will contain only short-read requests.
      a scan.ratio of 0.8 means that: 6 queues will contain only long-read requests
      and 2 queues will contain only short-read requests.
    </description>
</property>

<property>
  <name>hbase.client.max.perregion.tasks</name>
  <value>1</value>
    <description>The maximum number of concurrent mutation tasks the client will
    maintain to a single Region. That is, if there is already
    hbase.client.max.perregion.tasks writes in progress for this region, new puts
    won't be sent to this region until some writes finishes.</description>
</property>

<property>
  <name>hbase.bulkload.retries.number</name>
  <value>1</value>
    <description>Maximum retries.  This is maximum number of iterations
    to atomic bulk loads are attempted in the face of splitting operations
    0 means never give up.</description>
</property>

<property>
  <name>hbase.hstore.compaction.min.size</name>
  <value>134217728</value>
    <description>A StoreFile (or a selection of StoreFiles, when using ExploringCompactionPolicy)
      smaller than this size will always be eligible for minor compaction.
      HFiles this size or larger are evaluated by hbase.hstore.compaction.ratio to determine if
      they are eligible. Because this limit represents the "automatic include" limit for all
      StoreFiles smaller than this value, this value may need to be reduced in write-heavy
      environments where many StoreFiles in the 1-2 MB range are being flushed, because every
      StoreFile will be targeted for compaction and the resulting StoreFiles may still be under the
      minimum size and require further compaction. If this parameter is lowered, the ratio check is
      triggered more quickly. This addressed some issues seen in earlier versions of HBase but
      changing this parameter is no longer necessary in most situations. Default: 128 MB expressed
      in bytes.</description>
</property>

<property>
  <name>hbase.hstore.compaction.max.size</name>
  <value>130000000</value>
    <description>A StoreFile (or a selection of StoreFiles, when using ExploringCompactionPolicy)
      larger than this size will be excluded from compaction. The effect of
      raising hbase.hstore.compaction.max.size is fewer, larger StoreFiles that do not get
      compacted often. If you feel that compaction is happening too often without much benefit, you
      can try raising this value. Default: the value of LONG.MAX_VALUE, expressed in bytes.</description>
</property>

<property>
  <name>hbase.hstore.compaction.throughput.lower.bound</name>
  <value>104857600</value>
    <description>The target lower bound on aggregate compaction throughput, in bytes/sec. Allows
    you to tune the minimum available compaction throughput when the
    PressureAwareCompactionThroughputController throughput controller is active. (It is active by
    default.)</description>
</property>

<property>
  <name>hbase.thrift.minWorkerThreads</name>
  <value>32</value>
    <description>The "core size" of the thread pool. New threads are created on every
    connection until this many threads are created.</description>
</property>

<property>
  <name>hbase.security.visibility.mutations.checkauths</name>
  <value>false</value>
    <description>
      This property if enabled, will check whether the labels in the visibility
      expression are associated with the user issuing the mutation
    </description>
</property>

</configuration>
