<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.ipc.server.callqueue.handler.factor</name>
  <value>0.1</value>
    <description>Factor to determine the number of call queues.
      A value of 0 means a single queue shared between all the handlers.
      A value of 1 means that each handler has its own queue.</description>
</property>

<property>
  <name>hbase.ipc.server.callqueue.read.ratio</name>
  <value>1</value>
    <description>Split the call queues into read and write queues.
      The specified interval (which should be between 0.0 and 1.0)
      will be multiplied by the number of call queues.
      A value of 0 indicate to not split the call queues, meaning that both read and write
      requests will be pushed to the same set of queues.
      A value lower than 0.5 means that there will be less read queues than write queues.
      A value of 0.5 means there will be the same number of read and write queues.
      A value greater than 0.5 means that there will be more read queues than write queues.
      A value of 1.0 means that all the queues except one are used to dispatch read requests.

      Example: Given the total number of call queues being 10
      a read.ratio of 0 means that: the 10 queues will contain both read/write requests.
      a read.ratio of 0.3 means that: 3 queues will contain only read requests
      and 7 queues will contain only write requests.
      a read.ratio of 0.5 means that: 5 queues will contain only read requests
      and 5 queues will contain only write requests.
      a read.ratio of 0.8 means that: 8 queues will contain only read requests
      and 2 queues will contain only write requests.
      a read.ratio of 1 means that: 9 queues will contain only read requests
      and 1 queues will contain only write requests.
    </description>
</property>

<property>
  <name>hbase.ipc.server.callqueue.scan.ratio</name>
  <value>-1</value>
    <description>Given the number of read call queues, calculated from the total number
      of call queues multiplied by the callqueue.read.ratio, the scan.ratio property
      will split the read call queues into small-read and long-read queues.
      A value lower than 0.5 means that there will be less long-read queues than short-read queues.
      A value of 0.5 means that there will be the same number of short-read and long-read queues.
      A value greater than 0.5 means that there will be more long-read queues than short-read queues
      A value of 0 or 1 indicate to use the same set of queues for gets and scans.

      Example: Given the total number of read call queues being 8
      a scan.ratio of 0 or 1 means that: 8 queues will contain both long and short read requests.
      a scan.ratio of 0.3 means that: 2 queues will contain only long-read requests
      and 6 queues will contain only short-read requests.
      a scan.ratio of 0.5 means that: 4 queues will contain only long-read requests
      and 4 queues will contain only short-read requests.
      a scan.ratio of 0.8 means that: 6 queues will contain only long-read requests
      and 2 queues will contain only short-read requests.
    </description>
</property>

<property>
  <name>hbase.hregion.max.filesize</name>
  <value>10737418240</value>
    <description>
    Maximum HFile size. If the sum of the sizes of a region's HFiles has grown to exceed this
    value, the region is split in two.</description>
</property>

<property>
  <name>hfile.format.version</name>
  <value>3</value>
      <description>The HFile format version to use for new files.
      Version 3 adds support for tags in hfiles (See http://hbase.apache.org/book.html#hbase.tags).
      Also see the configuration 'hbase.replication.rpc.codec'.
      </description>
</property>

<property>
  <name>hbase.coprocessor.enabled</name>
  <value>false</value>
    <description>Enables or disables coprocessor loading. If 'false'
    (disabled), any other coprocessor related configuration will be ignored.
    </description>
</property>

<property>
  <name>hbase.thrift.maxQueuedRequests</name>
  <value>2000</value>
    <description>The maximum number of pending Thrift connections waiting in the queue. If
     there are no idle threads in the pool, the server queues requests. Only
     when the queue overflows, new threads are added, up to
     hbase.thrift.maxQueuedRequests threads.</description>
</property>

<property>
  <name>hbase.status.multicast.address.port</name>
  <value>-100</value>
    <description>
      Multicast port to use for the status publication by multicast.
    </description>
</property>

</configuration>
