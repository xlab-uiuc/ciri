<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.hstore.flusher.count</name>
  <value>2</value>
    <description> The number of flush threads. With fewer threads, the MemStore flushes will be
      queued. With more threads, the flushes will be executed in parallel, increasing the load on
      HDFS, and potentially causing more compactions. </description>
</property>

<property>
  <name>hbase.rest.readonly</name>
  <value>false</value>
    <description>Defines the mode the REST server will be started in. Possible values are:
    false: All HTTP methods are permitted - GET/PUT/POST/DELETE.
    true: Only the GET method is permitted.</description>
</property>

<property>
  <name>hbase.regionserver.thrift.framed.max_frame_size_in_mb</name>
  <value>2</value>
    <description>Default frame size when using framed transport, in MB</description>
</property>

<property>
  <name>hbase.regionserver.checksum.verify</name>
  <value>true</value>
    <description>
        If set to true (the default), HBase verifies the checksums for hfile
        blocks. HBase writes checksums inline with the data when it writes out
        hfiles. HDFS (as of this writing) writes checksums to a separate file
        than the data file necessitating extra seeks.  Setting this flag saves
        some on i/o.  Checksum verification by HDFS will be internally disabled
        on hfile streams when this flag is set.  If the hbase-checksum verification
        fails, we will switch back to using HDFS checksums (so do not disable HDFS
        checksums!  And besides this feature applies to hfiles only, not to WALs).
        If this parameter is set to false, then hbase will not verify any checksums,
        instead it will depend on checksum verification being done in the HDFS client.
    </description>
</property>

<property>
  <name>hbase.server.scanner.max.result.size</name>
  <value>104857600</value>
    <description>Maximum number of bytes returned when calling a scanner's next method.
    Note that when a single row is larger than this limit the row is still returned completely.
    The default value is 100MB.
    This is a safety setting to protect the server from OOM situations.
    </description>
</property>

<property>
  <name>hbase.rest.csrf.enabled</name>
  <value>true</value>
  <description>
    Set to true to enable protection against cross-site request forgery (CSRF)
	</description>
</property>

<property>
  <name>hbase.rpc.rows.warning.threshold</name>
  <value>10000</value>
    <description>
      Number of rows in a batch operation above which a warning will be logged.
    </description>
</property>

<property>
  <name>hbase.regionserver.slowlog.ringbuffer.size</name>
  <value>256</value>
    <description>
      Default size of ringbuffer to be maintained by each RegionServer in order
      to store online slowlog responses. This is an in-memory ring buffer of
      requests that were judged to be too slow in addition to the responseTooSlow
      logging. The in-memory representation would be complete.
      For more details, please look into Doc Section:
      Get Slow Response Log from shell
  </description>
</property>

</configuration>
