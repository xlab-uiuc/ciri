<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.tmp.dir</name>
  <value>/valid/file1</value>
    <description>Temporary directory on the local filesystem.
    Change this setting to point to a location more permanent
    than '/tmp', the usual resolve for java.io.tmpdir, as the
    '/tmp' directory is cleared on machine restart.</description>
</property>

<property>
  <name>hbase.regionserver.region.split.policy</name>
  <value>org.apache.hadoop.hbase.regionserver.SteppingSplitPolicy</value>
    <description>
      A split policy determines when a region should be split. The various
      other split policies that are available currently are BusyRegionSplitPolicy,
      ConstantSizeRegionSplitPolicy, DisabledRegionSplitPolicy,
      DelimitedKeyPrefixRegionSplitPolicy, KeyPrefixRegionSplitPolicy, and
      SteppingSplitPolicy. DisabledRegionSplitPolicy blocks manual region splitting.
    </description>
</property>

<property>
  <name>hbase.client.localityCheck.threadPoolSize</name>
  <value>2</value>
</property>

<property>
  <name>hbase.hregion.preclose.flush.size</name>
  <value>2621440</value>
    <description>
      If the memstores in a region are this size or larger when we go
      to close, run a "pre-flush" to clear out memstores before we put up
      the region closed flag and take the region offline.  On close,
      a flush is run under the close flag to empty memory.  During
      this time the region is offline and we are not taking on any writes.
      If the memstore content is large, this flush could take a long time to
      complete.  The preflush is meant to clean out the bulk of the memstore
      before putting up the close flag and taking the region offline so the
      flush that runs under the close flag has little to do.</description>
</property>

<property>
  <name>hbase.hregion.memstore.mslab.enabled</name>
  <value>false</value>
    <description>
      Enables the MemStore-Local Allocation Buffer,
      a feature which works to prevent heap fragmentation under
      heavy write loads. This can reduce the frequency of stop-the-world
      GC pauses on large heaps.</description>
</property>

<property>
  <name>hbase.ipc.server.fallback-to-simple-auth-allowed</name>
  <value>false</value>
    <description>When a server is configured to require secure connections, it will
      reject connection attempts from clients using SASL SIMPLE (unsecure) authentication.
      This setting allows secure servers to accept SASL SIMPLE connections from clients
      when the client requests.  When false (the default), the server will not allow the fallback
      to SIMPLE authentication, and will reject the connection.  WARNING: This setting should ONLY
      be used as a temporary measure while converting clients over to secure authentication.  It
      MUST BE DISABLED for secure operation.</description>
</property>

<property>
  <name>hbase.rest-csrf.browser-useragents-regex</name>
  <value>^Mozilla.*,^Opera.*</value>
  <description>
    A comma-separated list of regular expressions used to match against an HTTP
    request's User-Agent header when protection against cross-site request
    forgery (CSRF) is enabled for REST server by setting
    hbase.rest.csrf.enabled to true.  If the incoming User-Agent matches
    any of these regular expressions, then the request is considered to be sent
    by a browser, and therefore CSRF prevention is enforced.  If the request's
    User-Agent does not match any of these regular expressions, then the request
    is considered to be sent by something other than a browser, such as scripted
    automation.  In this case, CSRF is not a potential attack vector, so
    the prevention is not enforced.  This helps achieve backwards-compatibility
    with existing automation that has not been updated to send the CSRF
    prevention header.
  </description>
</property>

<property>
  <name>hbase.mob.delfile.max.count</name>
  <value>3</value>
    <description>
      The max number of del files that is allowed in the mob compaction.
      In the mob compaction, when the number of existing del files is larger than
      this value, they are merged until number of del files is not larger this value.
      The default value is 3.
    </description>
</property>

</configuration>
