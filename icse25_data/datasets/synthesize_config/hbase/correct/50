<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.local.dir</name>
  <value>/valid/file2</value>
    <description>Directory on the local filesystem to be used
    as a local storage.</description>
</property>

<property>
  <name>hbase.regionserver.port</name>
  <value>3001</value>
    <description>The port the HBase RegionServer binds to.</description>
</property>

<property>
  <name>hbase.zookeeper.property.clientPort</name>
  <value>2181</value>
    <description>Property from ZooKeeper's config zoo.cfg.
    The port at which the clients will connect.</description>
</property>

<property>
  <name>hbase.hregion.max.filesize</name>
  <value>21474836480</value>
    <description>
    Maximum HFile size. If the sum of the sizes of a region's HFiles has grown to exceed this
    value, the region is split in two.</description>
</property>

<property>
  <name>hbase.hstore.compaction.ratio</name>
  <value>1.2F</value>
    <description>For minor compaction, this ratio is used to determine whether a given StoreFile
      which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its
      effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio
      is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single
      giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the
      BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and
      1.4 is recommended. When tuning this value, you are balancing write costs with read costs.
      Raising the value (to something like 1.4) will have more write costs, because you will
      compact larger StoreFiles. However, during reads, HBase will need to seek through fewer
      StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of
      Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the
      background cost of writes, and use Bloom filters to control the number of StoreFiles touched
      during reads. For most cases, the default value is appropriate.</description>
</property>

<property>
  <name>hfile.block.bloom.cacheonwrite</name>
  <value>true</value>
      <description>Enables cache-on-write for inline blocks of a compound Bloom filter.</description>
</property>

<property>
  <name>hbase.ipc.server.fallback-to-simple-auth-allowed</name>
  <value>false</value>
    <description>When a server is configured to require secure connections, it will
      reject connection attempts from clients using SASL SIMPLE (unsecure) authentication.
      This setting allows secure servers to accept SASL SIMPLE connections from clients
      when the client requests.  When false (the default), the server will not allow the fallback
      to SIMPLE authentication, and will reject the connection.  WARNING: This setting should ONLY
      be used as a temporary measure while converting clients over to secure authentication.  It
      MUST BE DISABLED for secure operation.</description>
</property>

<property>
  <name>hbase.status.multicast.address.ip</name>
  <value>127.0.0.1</value>
    <description>
      Multicast address to use for the status publication by multicast.
    </description>
</property>

</configuration>
