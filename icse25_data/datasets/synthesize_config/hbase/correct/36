<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

<property>
  <name>hbase.rootdir</name>
  <value>/valid/file2</value>
    <description>The directory shared by region servers and into
    which HBase persists.  The URL should be 'fully-qualified'
    to include the filesystem scheme.  For example, to specify the
    HDFS directory '/hbase' where the HDFS instance's namenode is
    running at namenode.example.org on port 9000, set this value to:
    hdfs://namenode.example.org:9000/hbase.  By default, we write
    to whatever ${hbase.tmp.dir} is set too -- usually /tmp --
    so change this configuration or else all data will be lost on
    machine restart.</description>
</property>

<property>
  <name>hbase.master.logcleaner.ttl</name>
  <value>300000</value>
    <description>How long a WAL remain in the archive ({hbase.rootdir}/oldWALs) directory,
    after which it will be cleaned by a Master thread. The value is in milliseconds.</description>
</property>

<property>
  <name>hbase.hregion.preclose.flush.size</name>
  <value>2621440</value>
    <description>
      If the memstores in a region are this size or larger when we go
      to close, run a "pre-flush" to clear out memstores before we put up
      the region closed flag and take the region offline.  On close,
      a flush is run under the close flag to empty memory.  During
      this time the region is offline and we are not taking on any writes.
      If the memstore content is large, this flush could take a long time to
      complete.  The preflush is meant to clean out the bulk of the memstore
      before putting up the close flag and taking the region offline so the
      flush that runs under the close flag has little to do.</description>
</property>

<property>
  <name>hbase.hstore.compaction.ratio</name>
  <value>2.4</value>
    <description>For minor compaction, this ratio is used to determine whether a given StoreFile
      which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its
      effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio
      is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single
      giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the
      BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and
      1.4 is recommended. When tuning this value, you are balancing write costs with read costs.
      Raising the value (to something like 1.4) will have more write costs, because you will
      compact larger StoreFiles. However, during reads, HBase will need to seek through fewer
      StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of
      Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the
      background cost of writes, and use Bloom filters to control the number of StoreFiles touched
      during reads. For most cases, the default value is appropriate.</description>
</property>

<property>
  <name>hbase.thrift.maxQueuedRequests</name>
  <value>2000</value>
    <description>The maximum number of pending Thrift connections waiting in the queue. If
     there are no idle threads in the pool, the server queues requests. Only
     when the queue overflows, new threads are added, up to
     hbase.thrift.maxQueuedRequests threads.</description>
</property>

<property>
  <name>hbase.dfs.client.read.shortcircuit.buffer.size</name>
  <value>65536</value>
    <description>If the DFSClient configuration
    dfs.client.read.shortcircuit.buffer.size is unset, we will
    use what is configured here as the short circuit read default
    direct byte buffer size. DFSClient native default is 1MB; HBase
    keeps its HDFS files open so number of file blocks * 1MB soon
    starts to add up and threaten OOME because of a shortage of
    direct memory.  So, we set it down from the default.  Make
    it > the default hbase block size set in the HColumnDescriptor
    which is usually 64k.
    </description>
</property>

<property>
  <name>hbase.hstore.checksum.algorithm</name>
  <value>CRC32C</value>
    <description>
      Name of an algorithm that is used to compute checksums. Possible values
      are NULL, CRC32, CRC32C.
    </description>
</property>

<property>
  <name>hbase.dynamic.jars.dir</name>
  <value>${hbase.rootdir}/lib</value>
    <description>
      The directory from which the custom filter JARs can be loaded
      dynamically by the region server without the need to restart. However,
      an already loaded filter/co-processor class would not be un-loaded. See
      HBASE-1936 for more details.

      Does not apply to coprocessors.
    </description>
</property>

</configuration>
