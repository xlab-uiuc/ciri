Raw json:

{'hasError': True, 'errParameter': ['dfs.client.block.write.replace-datanode-on-failure.enable'], 'reason': ['dfs.client.block.write.replace-datanode-on-failure.enable should be false']}

{'hasError': True, 'errParameter': ['dfs.client.block.write.replace-datanode-on-failure.enable'], 'reason': ['dfs.client.block.write.replace-datanode-on-failure.enable is not a valid property. Did you mean dfs.client.block.write.replace-datanode-on-failure.policy?']}

{'hasError': True, 'errParameter': ['dfs.client.block.write.replace-datanode-on-failure.enable', 'dfs.client.block.write.replace-datanode-on-failure.policy'], 'reason': ['dfs.client.block.write.replace-datanode-on-failure.enable is set to false but dfs.client.block.write.replace-datanode-on-failure.policy is not set.', 'dfs.client.block.write.replace-datanode-on-failure.policy is set to NEVER but dfs.client.block.write.replace-datanode-on-failure.enable is set to true.']}

Final result:

There are 1 misconfiguration parameters in the input: dfs.client.block.write.replace-datanode-on-failure.enable
[Ciri] Reason for dfs.client.block.write.replace-datanode-on-failure.enable: dfs.client.block.write.replace-datanode-on-failure.enable should be false
